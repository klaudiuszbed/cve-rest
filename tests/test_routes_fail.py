import pytest
import json


class TestFailToken:
    @pytest.mark.parametrize("amount", [("542"), ("42343"), ("0")])
    def test_missing_token(self, test_client, amount):
        """
        GIVEN get API call
        WHEN user requests CVE
        THEN check if user authenticate with token
        """
        response = test_client.get(f'/cve?amount={amount}')
        assert b"Token is missing" in response.data


    @pytest.mark.parametrize("token", [("ksju453x"), ("324"), ("s s s 2")])
    def test_invalid_token(self, test_client, token):
        """
        GIVEN get API call
        WHEN user provided token header
        THEN check if token is invalid
        """
        headers = {"token": token}
        response = test_client.get(f'/cve', headers=headers)
        assert b"Invalid token." in response.data
        assert response.status_code == 401


    def test_expired_token(self, test_client):
        expired_token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiVmljYXJpcyIsImV4cCI6MTY1OTE5MDQzN30.0USEn7G9Z2KgvPLFSS-O3hYeqYL5K5TbL23uLkjJw3E"
        headers = {"token": expired_token}
        response = test_client.get(f'/cve', headers=headers)
        assert response.status_code == 401
        assert b"Token expired." in response.data


class TestFailUserOperations:
    headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json'}

    @pytest.mark.parametrize("password", [("noNumberPassword"), ("a"), ("no spaces"), ("noCapital")])
    def test_invalid_password(self, test_client, password):
        """Check all invalid password cases"""
        data = {
            'username': "ValidUsername11",
            'password': password}

        # dumps - turn python object into a json string
        response = test_client.post('/user/register', data=json.dumps(data), headers=self.headers)
        assert response.status_code == 400


    @pytest.mark.parametrize("username", [("username spaces"), ("a")])
    def test_invalid_username(self, test_client, username):
        """Check all invalid username cases"""
        data = {
            'username': username, 
            'password': 'ValidPassword123'
        }
        response = test_client.post('/user/register', data=json.dumps(data), headers=self.headers)
        print(response.text)
        assert response.status_code == 400


# run for each touple in decorator
@pytest.mark.parametrize("amount",[("2001"), ("893248723487"), ("3478534875")])
def test_too_many_cve_fail(test_client, amount, user_token):
    """
    GIVEN get API call 
    WHEN too many CVEs are requested
    THEN check if the amount of CVEs is right
    """
    token = user_token  # fixture that logs user in and returns token
    headers = {'token': token}
    response = test_client.get(f'/cve?amount={amount}', headers=headers)
    assert b"You've requested too many CVEs at once. Max is 2000." in response.data


