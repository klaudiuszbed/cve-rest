import pytest
import json


@pytest.mark.parametrize("amount", [("5"), ("30"), ("45"), ("49"), ("33"), ("0"), ("22")])
def test_get_request(test_client, amount, user_token):
    token = user_token  # fixture that logs user in and returns token
    headers = {'token': token}
    response = test_client.get(f'/cve?amount={amount}', headers=headers)
    assert response.status_code == 200 and b"data" in response.data


def test_home_redirect(test_client):
    response = test_client.get(f'/')
    assert response.status_code == 302


class TestUserOperations:
    # Each test has a unique instance of the class
    headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json'}

    def test_user_register(self, test_client):
        # https://pytest-flask.readthedocs.io/en/latest/features.html#fixtures
        username = "properUsername"
        password = "properPassword12"

        data = {
            'username': username,
            'password': password}

        # dumps - turn python object into a json string
        response = test_client.post('/user/register', data=json.dumps(data), headers=self.headers)
        assert response.status_code == 201


    def test_login(self, test_client, user_register):
        data = user_register  # register user and return credentials    
        response = test_client.post('/user/login', data=json.dumps(data), headers=self.headers)
        assert response.status_code == 200
        assert b"User authenticated successfully." in response.data


    def test_update_username(self, test_client, user_register):
        data = user_register
        data["new_username"] = "newUsernameTest"  # update dict with new_username key
        response = test_client.patch('/user/update', data=json.dumps(data), headers=self.headers)
        assert response.status_code == 200
        assert b"Username updated succesfully." in response.data


    def test_user_delete(self, test_client, user_register):
        data = user_register
        response = test_client.delete('/user/delete', data=json.dumps(data), headers=self.headers)
        assert response.status_code == 200
        assert b"User deleted succesfully." in response.data

