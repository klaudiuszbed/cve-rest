from marshmallow import Schema, fields, validate, ValidationError


# basic validation, user still can provide password=A1111111
def validate_password(password):
    if " " in password:
        raise ValidationError(message="Password must not contain spaces.")
    if any(char.isdigit() for char in password) and any(char.isupper() for char in password):
        pass
    else:
        raise ValidationError(
            message="Password must contain at least one uppercase character and one number.")


# basic validation
def validate_username(username):
    if " " in username:
        raise ValidationError(message="Username must not contain spaces.")


class UserSchema(Schema):
    username = fields.Str(validate=validate.And(
        validate.Length(min=4, max=30, error="Username must be at least 4 characters long."), validate_username))
    password = fields.Str(validate=validate.And(
        validate.Length(min=8, max=30, error="Password must be at least 8 characters long."), validate_password))


class UserUpdateSchema(Schema):
    new_username = fields.Str(validate=validate.And(
        validate.Length(min=4, max=30, error="Username must be at least 4 characters long."), validate_username))
