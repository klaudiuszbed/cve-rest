from flask import request, jsonify, current_app
from jwt.exceptions import ExpiredSignatureError
from functools import wraps
import jwt


def token_required(func):  # as argument takes function that is decorated
    @wraps(func)  # replace inner.__doc__ with func.__doc__
    def inner(*args, **kwargs):  # arbitrary function that can serve pretty much everything
        token = None

        # check for token in request headers
        if 'token' in request.headers:
            token = request.headers['token']
        if not token:
            return jsonify(message="Token is missing."), 401

        try:
            data = jwt.decode(
                jwt=str(token),
                key=current_app.config["SECRET_KEY"],
                algorithms=['HS256'])
            # current_user = collection.find_one({"username": data["user"]})
            # get current user only if theres need to authorize on endpoints
        except ExpiredSignatureError:
            return jsonify(message="Token expired."), 401
        except Exception:
            return jsonify(message="Invalid token."), 401

        return func(*args, **kwargs)
    return inner
