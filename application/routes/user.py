from application import db_connect
from application.schema import UserSchema
from flask import Blueprint, jsonify, request, current_app
from marshmallow import ValidationError
from passlib.hash import pbkdf2_sha256
from datetime import datetime, timedelta
import jwt


user_bp = Blueprint("user_bp", __name__)

# mongodb connection
collection = db_connect(collection_name='user')


@user_bp.route('/user/register', methods=["POST"])
def user_register():
    """Endpoint for user registration."""
    
    # validate user input
    request_user_creds = request.get_json()  # returns dict
    try:
        user_credentials = UserSchema().load(request_user_creds)
    except ValidationError as err:  # invalid input
        return jsonify(err.messages), 400

    username = str(user_credentials["username"])
    password = str(user_credentials["password"])

    user_exist = collection.find_one({"username": username})  # check if user exists
    if user_exist:
        # if user already exists, throw HTTP 409 - conflict
        return jsonify(message="User already exists. Try again."), 409
        
    password_hash = pbkdf2_sha256.hash(password)  # password hashing
    user_credentials["password"] = password_hash  # replace plain password with hash

    # if user does not exist, save user to database
    collection.insert_one(user_credentials)

    # if user has been created successfully
    return jsonify(message=f"User {username} created successfully, you can now log in."), 201



@user_bp.route('/user/login', methods=['POST'])
def user_login():
    """ User authentication endpodint. After successfull login return 1h-valid JWT to user."""

    # user input
    request_json_data = request.get_json()
    username = str(request_json_data["username"])
    password = str(request_json_data["password"])

    # https://blog.logrocket.com/how-to-secure-a-rest-api-using-jwt-7efd83e71432/
    # header = type of token, payload = data pertaining to the request, signature = secret key

    user = collection.find_one({"username": username})
    if user:
        passw_verification = pbkdf2_sha256.verify(password, user["password"])
        if passw_verification is True:
            # create and grant token
            token = jwt.encode(
                payload={'user': user["username"], "exp": datetime.utcnow() + timedelta(seconds=120)},
                key=current_app.config["SECRET_KEY"],
                algorithm="HS256")
            
            return jsonify(message="User authenticated successfully.", token=token), 200
        else:
            return jsonify(message="User authentication failure.")
    else:
        return jsonify(message="User does not exist.")
    

@user_bp.route('/user/delete', methods=["DELETE"])
def user_delete():
    """Endpoint for user deletion."""

    # user input
    request_json_data = request.get_json()
    username = str(request_json_data["username"])
    password = str(request_json_data["password"])

    # check and authenticate user
    user = collection.find_one({"username": username})
    if not user:
        # revent user enumeration - do not return message saying that user does not exist
        return jsonify(message="Authentication failure."), 400
    if user:
        passw_verification = pbkdf2_sha256.verify(password, user["password"])
        if passw_verification is True:
            collection.delete_one({"username": username})
            return jsonify(
                message="User deleted succesfully.",
                user_data={"user_id": str(user["_id"]), "username":username}), 200
        if passw_verification is False:
            return jsonify(message="Authenticaion failure."), 401


@user_bp.route('/user/update', methods=["PATCH"])
def user_update():
    """Endpoint for updating user data."""
    request_json_data = request.get_json()
    username = str(request_json_data["username"])
    password = str(request_json_data["password"])
    new_username = str(request_json_data["new_username"])

    username_taken = collection.find_one({"username": new_username})
    if username_taken:
        return jsonify(message="Username already taken."), 400

    # check and authenticate user
    user = collection.find_one({"username": username})
    if not user:
        # revent user enumeration - do not return message saying that user does not exist
        return jsonify(message="Authentication failure."), 401
    if user:
        passw_verification = pbkdf2_sha256.verify(password, user["password"])
        if passw_verification is True:   
            collection.find_one_and_update({"username": username}, {'$set': {"username": new_username}})
            return jsonify(
                message="Username updated succesfully.",
                user_data={"user_id": str(user["_id"]), "username":new_username}), 200
        if passw_verification is False:
            return jsonify(message="Authentication failure."), 401


